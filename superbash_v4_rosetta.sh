#!/bin/bash
set -euo pipefail

BASE="$HOME/Infinity_X_One"
PACK="$BASE/agent_build_pack"
mkdir -p $PACK/{agents,scripts,systemd,supabase/migrations,logs}

echo "ðŸš€ Infinity X One â€” Superbash v4.0.0 (Rosetta Aligned)"
echo "ðŸ“‚ Build directory: $PACK"

# 1. Infinity Agent One (FastAPI + Supabase logger)
cat <<'EOF' > $PACK/agents/infinity_agent_one.py
import os, logging, time, json
from fastapi import FastAPI
import uvicorn
from supabase import create_client, Client

# ENV load
ENV_PATH = os.path.expanduser("~/Infinity_X_One/env/system.env")
if os.path.exists(ENV_PATH):
    for line in open(ENV_PATH):
        if "=" in line:
            k,v=line.strip().split("=",1); os.environ[k]=v

SUPABASE_URL=os.environ.get("SUPABASE_URL")
SUPABASE_KEY=os.environ.get("SUPABASE_SERVICE_ROLE_KEY")
supabase: Client = create_client(SUPABASE_URL,SUPABASE_KEY)

logfile=os.path.expanduser("~/Infinity_X_One/logs/agent_one.log")
logging.basicConfig(filename=logfile,level=logging.INFO,format="%(asctime)s %(message)s")

app=FastAPI(title="Infinity Agent One")

def log_event(event_type,payload):
    try: supabase.table("system_events").insert(
        {"agent":"AgentOne","event_type":event_type,"payload":json.dumps(payload)}
    ).execute()
    except Exception as e: logging.error(f"Supabase error: {e}")

@app.get("/heartbeat")
def heartbeat():
    data={"agent":"AgentOne","status":"alive"}
    try: supabase.table("agent_status").insert(data).execute()
    except Exception as e: logging.error(f"Supabase error: {e}")
    log_event("heartbeat",data)
    return data

if __name__=="__main__":
    uvicorn.run(app,host="0.0.0.0",port=8000)
EOF

# 2. Agent Spawner (2â€“10)
cat <<'EOF' > $PACK/agents/agent_spawner.py
import os, subprocess, json, datetime

AGENTS={2:"faucet_hunter",3:"api_key_harvester",4:"fin_synapse",
        5:"guardian",6:"pickybot",7:"echo",8:"aria",
        9:"corelight",10:"atlas"}

BASE=os.path.expanduser("~/Infinity_X_One/agents")
os.makedirs(BASE,exist_ok=True)

for num,name in AGENTS.items():
    pyf=f"{BASE}/{name}.py"
    if not os.path.exists(pyf):
        with open(pyf,"w") as f:
            f.write(f"import time;print('âœ… Agent {num} ({name}) online');time.sleep(999999)")

    unit=f"""[Unit]
Description=Infinity Agent {num} - {name}
After=network.target

[Service]
ExecStart=python3 {pyf}
Restart=always
WorkingDirectory={BASE}
EnvironmentFile=%h/Infinity_X_One/env/system.env
StandardOutput=append:%h/Infinity_X_One/logs/agent_{num}.log
StandardError=append:%h/Infinity_X_One/logs/agent_{num}.err

[Install]
WantedBy=default.target
"""
    unitpath=os.path.expanduser(f"~/.config/systemd/user/infinity_agent_{num}.service")
    os.makedirs(os.path.dirname(unitpath),exist_ok=True)
    open(unitpath,"w").write(unit)
    subprocess.run(["systemctl","--user","enable",f"infinity_agent_{num}.service"])
print("âœ… Agents 2â€“10 registered in systemd")
EOF

# 3. Systemd Unit for Agent One
mkdir -p ~/.config/systemd/user
cat <<'EOF' > ~/.config/systemd/user/infinity_agent_one.service
[Unit]
Description=Infinity Agent One
After=network.target

[Service]
ExecStart=python3 %h/Infinity_X_One/agent_build_pack/agents/infinity_agent_one.py
Restart=always
EnvironmentFile=%h/Infinity_X_One/env/system.env
WorkingDirectory=%h/Infinity_X_One/agent_build_pack/agents
StandardOutput=append:%h/Infinity_X_One/logs/agent_one.log
StandardError=append:%h/Infinity_X_One/logs/agent_one.err

[Install]
WantedBy=default.target
EOF

# 4. Supabase migrations (Rosetta schema)
cat <<'EOF' > $PACK/supabase/migrations/001_rosetta.sql
create table if not exists agent_status (
  id bigint generated by default as identity primary key,
  agent text, status text, wallet text,
  last_heartbeat timestamp default now()
);
create table if not exists system_events (
  id bigint generated by default as identity primary key,
  ts timestamp default now(),
  agent text, event_type text, payload jsonb
);
create table if not exists swarm_state (
  id bigint generated by default as identity primary key,
  ts timestamp default now(),
  active_agents int, details jsonb
);
create table if not exists agent_logs (
  id bigint generated by default as identity primary key,
  ts timestamp default now(),
  agent text, action text, details jsonb
);
create table if not exists rosetta_memory (
  id bigint generated by default as identity primary key,
  ts timestamp default now(),
  memory jsonb
);
EOF

# 5. Cron jobs
cat <<'EOF' > $PACK/scripts/swarm_cron.txt
*/10 * * * * curl -s localhost:8000/heartbeat
0 * * * * echo "faucet monitor tick" >> ~/Infinity_X_One/logs/faucet.log
*/30 * * * * echo "system health tick" >> ~/Infinity_X_One/logs/health.log
0 */4 * * * echo "agent eval tick" >> ~/Infinity_X_One/logs/eval.log
@daily echo '{"memory":"snapshot"}' | psql $SUPABASE_URL -c "insert into rosetta_memory(memory) values(jsonb_build_object('snapshot', now()));"
EOF
crontab $PACK/scripts/swarm_cron.txt

# 6. GitHub + Vercel sync
cat <<'EOF' > $PACK/scripts/git_vercel_sync.sh
#!/bin/bash
cd ~/Infinity_X_One
git add .
git commit -m "ðŸ¤– AutoPush Rosetta Pack: $(date)"
git push origin main
vercel --prod --yes
EOF
chmod +x $PACK/scripts/git_vercel_sync.sh

# 7. README
cat <<'EOF' > $PACK/README_MOVEOVER.md
# Infinity Agent Build Pack (v4.0.0 Rosetta-Aligned)

## Includes:
- Agent One (FastAPI + Supabase)
- Agents 2â€“10 placeholders
- Supabase schema: agent_status, system_events, swarm_state, agent_logs, rosetta_memory
- Cron jobs (heartbeat, health, eval, daily Rosetta snapshot)
- GitHub + Vercel sync script

## Usage
cp -r ~/Infinity_X_One/agent_build_pack/* ~/Infinity_X_One/
systemctl --user daemon-reexec
systemctl --user daemon-reload
systemctl --user enable --now infinity_agent_one.service
python3 ~/Infinity_X_One/agent_build_pack/agents/agent_spawner.py
EOF

echo "âœ… Superbash v4.0.0 (Rosetta Aligned) complete"
